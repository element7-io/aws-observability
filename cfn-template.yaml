---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ECSClusterName:
    Type: String
    Description: Enter the name of your ECS cluster from which you want to collect Prometheus metrics
  VpcIdParam:
    Type: String
    Description: The VPC id
  SubnetsParam:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  CWAgentConfigSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ecs-service-discovery/cwagent-config
      Type: String
      Tier: Intelligent-Tiering
      Description: !Sub 'CWAgent SSM Parameter holding the service discovery config for ECS Cluster: ${ECSClusterName}'
      Value: |-
        {
            "logs": {
                "force_flush_interval": 5,
                "metrics_collected": {
                    "prometheus": {
                        "ecs_service_discovery": {
                            "docker_label": {},
                            "sd_frequency": "1m",
                            "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml",
                            "task_definition_list": [
                                {
                                    "sd_job_name": "discover-prometheus",
                                    "sd_metrics_path": "/metrics",
                                    "sd_metrics_ports": "9090",
                                    "sd_task_definition_arn_pattern": ".*"
                                },
                                {
                                    "sd_job_name": "discover-yace",
                                    "sd_metrics_path": "/metrics",
                                    "sd_metrics_ports": "5000",
                                    "sd_task_definition_arn_pattern": ".*:task-definition/yace:[0-9]+"
                                },
                                {
                                    "sd_job_name": "discover-cost-exporter",
                                    "sd_metrics_path": "/metrics",
                                    "sd_metrics_ports": "5000",
                                    "sd_task_definition_arn_pattern": ".*:task-definition/cost-exporter:[0-9]+"
                                }
                            ]
                        },
                        "prometheus_config_path": "/opt/aws/amazon-cloudwatch-agent/bin/prometheus.yml"
                    }
                }
            }
        }

  CWAgentECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EcsTaskExecutionRoleFor-cwagent-ecs-cfn
      Description: Allows ECS container agent makes calls to the Amazon ECS API on your behalf.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECSSSMInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: arn:aws:ssm:*:*:parameter/ecs-service-discovery*

  CWAgentECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TaskRoleFor-cwagent-ecs-cfn
      Description: Allows ECS tasks to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECSServiceDiscoveryInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeServices
                  - ecs:ListServices
                Resource: "*"
                Condition:
                  ArnEquals:
                    ecs:cluster:
                      !Sub 'arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSClusterName}'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ecs:DescribeTaskDefinition
                Resource: "*"
        - PolicyName: CWAgentTaskExecutionPolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
                # Allow the ECS tasks to upload logs to CloudWatch
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  ECSCWAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: cwagent-ecs-sd-cfn
      TaskRoleArn: !Ref CWAgentECSTaskRole
      ExecutionRoleArn: !GetAtt CWAgentECSExecutionRole.Arn
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: cloudwatch-agent-prometheus
          Image: public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest
          Essential: true
          MountPoints:
            - ContainerPath: /tmp
              SourceVolume: efs-volume
          PortMappings: []
          Environment: []
          Secrets:
            - Name: CW_CONFIG_CONTENT
              ValueFrom: /ecs-service-discovery/cwagent-config
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'True'
              awslogs-group: "/ecs/ecs-cwagent-prometheus"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs-fargate-awsvpc'
      Volumes:
        - Name: efs-volume
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref ECSCWAgentAccessPointResource
            FilesystemId: !Ref EcsSdFileShare
            TransitEncryption: ENABLED
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: '1024'

  ECSCWAgentService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSClusterName
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      SchedulingStrategy: REPLICA
      ServiceName: cwagent-ecs-service-discovery-srv-cfn
      TaskDefinition: !Ref ECSCWAgentTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSCWAgentSecurityGroup
          Subnets: !Ref SubnetsParam

  ECSCWAgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "CloudWatch Agent ECS Service Discovery Security Group"
      VpcId: !Ref VpcIdParam
      Tags:
        - Key: Name
          Value: cwagent-ecs-sd-sg-cfn

  EcsSdFileShare:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
          TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
        - Key: Name
          Value: efs-sd-to-prometheus-gate-cfn

  EcsSdFileShareSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      GroupName: efs-sd-prometheus-gate-sg-cfn
      GroupDescription: allow tcp for nfs
      VpcId: !Ref VpcIdParam
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ECSCWAgentSecurityGroup
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
      Tags:
        - Key: Name
          Value: efs-sd-prometheus-gate-sg-cfn

  EcsSdFileShareMountTargetSubnetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EcsSdFileShare
      SubnetId: !Select [ 0, !Ref SubnetsParam ]
      SecurityGroups:
        - !Ref EcsSdFileShareSecurityGroup

  EcsSdFileShareMountTargetSubnetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EcsSdFileShare
      SubnetId: !Select [ 1, !Ref SubnetsParam ]
      SecurityGroups:
        - !Ref EcsSdFileShareSecurityGroup

  EcsSdFileShareMountTargetSubnetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EcsSdFileShare
      SubnetId: !Select [ 2, !Ref SubnetsParam ]
      SecurityGroups:
        - !Ref EcsSdFileShareSecurityGroup

  ECSCWAgentAccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EcsSdFileShare
      RootDirectory:
        CreationInfo:
          OwnerGid: "0"
          OwnerUid: "0"
          Permissions: "0755"
        Path: "/prometheus"
